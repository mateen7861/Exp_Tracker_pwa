{"version":3,"sources":["context/AppReducer.tsx","context/GlobalContext.tsx","components/NewTransaction.tsx","components/Transaction.tsx","components/TransactionsList.tsx","components/Balance.tsx","components/IncomeExpenses.tsx","components/Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["state","action","type","transactions","filter","t","id","transaction","startingState","title","amount","deleteTransaction","addTransaction","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","NewTransaction","useContext","useState","setTitle","onSubmit","e","preventDefault","newTransaction","Math","floor","random","className","htmlFor","required","onChange","target","placeholder","ref","node","Number","Transaction","sign","abs","onClick","TransactionsList","map","key","Balance","balance","reduce","a","b","IncomeExpenses","transactioAmounts","income","i","expense","Header","style","marginBottom","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.883b3121.chunk.js","sourcesContent":["import { TransactionType } from \"../Types\";\n\ntype Actions = \n| {type: \"add\", transaction: TransactionType}\n| {type: \"delete\", id: number}\n\nexport default (state: { transactions: TransactionType[]; }, action: Actions ) => {\n    switch(action.type) {\n        case 'delete':\n            return {\n                transactions: state.transactions.filter(t => t.id !== action.id)\n            }\n        case 'add':\n            return {\n                ...state,\n                transactions: [action.transaction, ...state.transactions]\n            }\n        default:\n            return state;\n    }\n}","import React, { createContext, useReducer } from \"react\";\nimport AppReducer from \"./AppReducer\";\nimport { TransactionType } from \"../Types\";\n\nconst startingState = {\n  transactions: [{ id: 1, title: \"Salary\", amount: 90000 }],\n  deleteTransaction: (id: number) => {},\n  addTransaction: (transaction: TransactionType) => {},\n};\n\nexport const GlobalContext = createContext(startingState);\n\nexport const GlobalProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(AppReducer, startingState);\n\n  // Actions (will be sent to reducer)\n  function deleteTransaction(id: number) {\n    dispatch({\n      type: \"delete\",\n      id,\n    });\n  }\n\n  function addTransaction(transaction: TransactionType) {\n    dispatch({\n      type: \"add\",\n      transaction,\n    });\n  }\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        transactions: state.transactions,\n        deleteTransaction,\n        addTransaction,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n","import React, { useContext, useState } from \"react\";\nimport { GlobalContext } from \"../context/GlobalContext\";\n\nconst NewTransaction = () => {\n  const { addTransaction } = useContext(GlobalContext);\n  let amount: number | string = \"\";\n  // Local Context\n  const [title, setTitle] = useState(\"\");\n  // const [amount, setAmount] = useState(0);\n\n  // Create transaction on form submit\n  const onSubmit = (e: { preventDefault: () => void }) => {\n    e.preventDefault();\n\n    const newTransaction = {\n      id: Math.floor(Math.random() * 100000000),\n      title,\n      amount: +amount,\n    };\n\n    addTransaction(newTransaction);\n  };\n\n  return (\n    <>\n      <h3>Add new transaction</h3>\n      <form onSubmit={onSubmit}>\n        <div className=\"form-control\">\n          <label htmlFor=\"text\">Text</label>\n          <input\n            type=\"text\"\n            value={title}\n            required={true}\n            onChange={(e) => {\n              setTitle(e.target.value);\n            }}\n            placeholder=\"Enter text...\"\n          />\n        </div>\n        <div className=\"form-control\">\n          <label htmlFor=\"amount\">\n            Amount <br />\n            (negative - expense, positive - income)\n          </label>\n          <input\n            type=\"number\"\n            ref={node => amount = Number(node?.value)}\n            placeholder=\"Enter amount...\"\n          />\n        </div>\n        <button className=\"btn\">Add transaction</button>\n      </form>\n    </>\n  );\n};\n\nexport default NewTransaction;\n","import React, { useContext } from \"react\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport { TransactionType } from \"../Types\";\n\nconst Transaction: React.FC<TransactionType> = ({ id, title, amount }) => {\n  const { deleteTransaction } = useContext(GlobalContext);\n\n  const sign = amount > 0 ? \"+\" : \"-\";\n\n  return (\n    <li className={amount > 0 ? \"plus\" : \"minus\"}>\n      {title}\n      <span>\n        {sign}PKR {Math.abs(amount)}\n      </span>\n      <button onClick={() => deleteTransaction(id)} className=\"delete-btn\">\n        x\n      </button>\n    </li>\n  );\n};\n\nexport default Transaction;\n","import React, { useContext } from \"react\";\nimport Transaction from \"./Transaction\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\n\nfunction TransactionsList() {\n  const { transactions } = useContext(GlobalContext);\n\n  return (\n    <div>\n      <h3>History</h3>\n      <ul className=\"list\">\n        {transactions.map((transaction) => (\n          <Transaction\n            key={transaction.id}\n            id={transaction.id}\n            title={transaction.title}\n            amount={transaction.amount}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default TransactionsList;\n","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"../context/GlobalContext\";\n\nexport const Balance = () => {\n  const { transactions } = useContext(GlobalContext);\n\n  // Calculate balance\n  const transactioAmounts = transactions.map(\n    (transaction) => transaction.amount\n  );\n  const balance = transactioAmounts.reduce((a, b) => a + b, 0);\n\n  return (\n    <>\n      <h4>Your Balance</h4>\n      <h1>PKR {balance}</h1>\n    </>\n  );\n};\n\nexport default Balance;\n","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"../context/GlobalContext\";\n\nexport const IncomeExpenses = () => {\n  const { transactions } = useContext(GlobalContext);\n\n  // Calculate income and expenses\n  const transactioAmounts = transactions.map(\n    (transaction) => transaction.amount\n  );\n  const income = transactioAmounts\n    .filter((i) => i > 0)\n    .reduce((a, b) => a + b, 0);\n  const expense = -transactioAmounts\n    .filter((i) => i < 0)\n    .reduce((a, b) => a + b, 0);\n\n  return (\n    <div>\n      <div className=\"inc-exp-container\">\n        <div>\n          <h4>Income</h4>\n          <p className=\"money plus\">PKR {income}</p>\n        </div>\n        <div>\n          <h4>Expense</h4>\n          <p className=\"money minus\">PKR {expense}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default IncomeExpenses;\n","import React from \"react\";\n\nconst Header = () => {\n  return <h1 style={{ marginBottom: \"30px\" }}>Expense Tracker</h1>;\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport NewTransaction from \"./components/NewTransaction\";\nimport TransactionsList from \"./components/TransactionsList\";\n\nimport { GlobalProvider } from \"./context/GlobalContext\";\nimport Balance from \"./components/Balance\";\nimport IncomeExpenses from \"./components/IncomeExpenses\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Header />\n      <div className=\"App\">\n        <Balance />\n        <IncomeExpenses />\n        <TransactionsList />\n        <NewTransaction />\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}